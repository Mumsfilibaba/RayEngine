#pragma once

#include <limits>
#include "..\RefCounter.h"

namespace RayEngine
{
	namespace Graphics
	{
		/////////////////////////////////////////////////////////////
		class IDevice;



		/////////////////////////////////////////////////////////////
		enum SAMPLER_ADRESS_MODE : int32
		{
			SAMPLER_ADRESS_MODE_UNKNOWN = 0,
			SAMPLER_ADRESS_MODE_WRAP = 1,
			SAMPLER_ADRESS_MODE_BORDER = 2,
			SAMPLER_ADRESS_MODE_CLAMP = 3,
			SAMPLER_ADRESS_MODE_MIRROR = 4,
			SAMPLER_ADRESS_MODE_MIRROR_ONCE = 5
		};



		/////////////////////////////////////////////////////////////
		enum SAMPLER_FILTER_MODE : int32
		{
			SAMPLER_FILTER_MODE_UNKNOWN = 0,
			SAMPLER_FILTER_MODE_MIN_MAG_MIP_POINT = 1,
			SAMPLER_FILTER_MODE_MIN_MAG_POINT_MIP_LINEAR = 2,
			SAMPLER_FILTER_MODE_MIN_POINT_MAG_LINEAR_MIP_POINT = 3,
			SAMPLER_FILTER_MODE_MIN_POINT_MAG_MIP_LINEAR = 4,
			SAMPLER_FILTER_MODE_MIN_LINEAR_MAG_MIP_POINT = 5,
			SAMPLER_FILTER_MODE_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 6,
			SAMPLER_FILTER_MODE_MIN_MAG_LINEAR_MIP_POINT = 7,
			SAMPLER_FILTER_MODE_MIN_MAG_MIP_LINEAR = 8,
			SAMPLER_FILTER_MODE_ANISOTROPIC = 9,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_MAG_MIP_POINT = 10,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 11,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 12,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 13,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 14,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 15,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 16,
			SAMPLER_FILTER_MODE_COMPARISON_MIN_MAG_MIP_LINEAR = 17,
			SAMPLER_FILTER_MODE_COMPARISON_ANISOTROPIC = 18,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_MAG_MIP_POINT = 19,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 20,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 21,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 22,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 23,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 24,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 25,
			SAMPLER_FILTER_MODE_MINIMUM_MIN_MAG_MIP_LINEAR = 26,
			SAMPLER_FILTER_MODE_MINIMUM_ANISOTROPIC = 27,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_MAG_MIP_POINT = 28,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 29,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 30,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 31,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 32,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 33,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 34,
			SAMPLER_FILTER_MODE_MAXIMUM_MIN_MAG_MIP_LINEAR = 35,
			SAMPLER_FILTER_MODE_MAXIMUM_ANISOTROPIC = 36
		};



		/////////////////////////////////////////////////////////////
		struct SamplerInfo
		{
			std::string Name = "";
			SAMPLER_FILTER_MODE FilterMode = SAMPLER_FILTER_MODE_UNKNOWN;
			SAMPLER_ADRESS_MODE AdressU = SAMPLER_ADRESS_MODE_UNKNOWN;
			SAMPLER_ADRESS_MODE AdressV = SAMPLER_ADRESS_MODE_UNKNOWN;
			SAMPLER_ADRESS_MODE AdressW = SAMPLER_ADRESS_MODE_UNKNOWN;
			float MipLODBias = 0.0f;
			float MinLOD = 0.0f;
			float MaxLOD = std::numeric_limits<float>::max();
			uint32 MaxAnistropy = 16;
			COMPARISON_FUNC ComparisonFunc = COMPARISON_FUNC_UNKNOWN;
			struct
			{
				float R = 0.0f;
				float G = 0.0f;
				float B = 0.0f;
				float A = 0.0f;
			} BorderColor;
		};



		/////////////////////////////////////////////////////////////
		class ISampler : public RefCounter
		{
		public:
			ISampler(ISampler&& other) = delete;
			ISampler(const ISampler& other) = delete;
			ISampler& operator=(ISampler&& other) = delete;
			ISampler& operator=(const ISampler& other) = delete;

		public:
			ISampler() {}
			virtual ~ISampler() {}

			virtual IDevice* GetDevice() = 0;
		};
	}
}