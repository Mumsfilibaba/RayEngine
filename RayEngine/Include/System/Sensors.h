/*////////////////////////////////////////////////////////////

Copyright 2018 Alexander Dahlin

Licensed under the Apache License, Version 2.0 (the
"License"); you may not use this file except in
compliance with the License. You may obtain a copy of
the License at

http ://www.apache.org/licenses/LICENSE-2.0

THIS SOFTWARE IS PROVIDED "AS IS". MEANING NO WARRANTY
OR SUPPORT IS PROVIDED OF ANY KIND.

In event of any damages, direct or indirect that can
be traced back to the use of this software, shall no
contributor be held liable. This includes computer
failure and or malfunction of any kind.

////////////////////////////////////////////////////////////*/

#pragma once
#include "../Defines.h"
#include "../Types.h"
#include "../System/TimeStamp.h"
#include "../Math/Vector3.h"

namespace RayEngine
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	enum SENSOR_TYPE : int32
	{
		SENSOR_TYPE_UNKNOWN = -1,
		SENSOR_TYPE_ACCELEROMETER = 0,
		SENSOR_TYPE_GYROSCOPE = 1,
		SENSOR_TYPE_MAGNETIC_FIELD = 2,
	};


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct SensorData
	{
		inline SensorData()
		{
			Accelerometer = Math::Vector3();
		}

		inline SensorData(SensorData&& other)
		{
			*this = other;
		}

		inline SensorData(const SensorData& other)
		{
			*this = other;	
		}

		inline ~SensorData()
		{

		}

		inline SensorData& operator=(SensorData&& other)
		{
			Accelerometer = other.Accelerometer;
			other.Accelerometer = Math::Vector3();

			return *this;
		}

		SensorData& operator=(const SensorData& other)
		{
			Accelerometer = other.Accelerometer;
			return *this;
		}
	
		union
		{
			Math::Vector3 Accelerometer;
			Math::Vector3 Gyroscope;
			Math::Vector3 MagneticField;
		};
	};


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class Sensors
	{
		RE_STATIC_CLASS(Sensors);

	public:
		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Returns true if the specified sensor is supported by the system.

			sensor - The sensor type to check for support.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static bool SensorSupported(SENSOR_TYPE sensor);

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Returns true if the specified sensor is enabled on the system.

			sensor - The sensor type to check if enabled.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static bool SensorEnabled(SENSOR_TYPE sensor);
		
		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Enables a sensor on the system. Returns true if the action was successfull.

			sensor - The sensor type to enable.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static bool EnableSensor(SENSOR_TYPE sensor);
		
		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Disables a sensor on the system. Returns true if the action was successfull.

			sensor - The sensor type to disable.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static bool DisableSensor(SENSOR_TYPE sensor);

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Sets the refreshrate on the sensor. 

			sensor - The sensor type.

			time - A timestamp that specified the time between refreshes.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static bool SetRefreshRate(SENSOR_TYPE sensor, const TimeStamp& time);
		
		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Returns the current data available for the specified sensor.

			sensor - The sensor type to get data from.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		static SensorData GetSensorValue(SENSOR_TYPE sensor);
	};
}