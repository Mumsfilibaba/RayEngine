/*////////////////////////////////////////////////////////////

Copyright 2018 Alexander Dahlin

Licensed under the Apache License, Version 2.0 (the
"License"); you may not use this file except in
compliance with the License. You may obtain a copy of
the License at

http ://www.apache.org/licenses/LICENSE-2.0

THIS SOFTWARE IS PROVIDED "AS IS". MEANING NO WARRANTY
OR SUPPORT IS PROVIDED OF ANY KIND.

In event of any damages, direct or indirect that can
be traced back to the use of this software, shall no
contributor be held liable. This includes computer
failure and or malfunction of any kind.

////////////////////////////////////////////////////////////*/

#pragma once
#include "../../Defines.h"
#include "../../Types.h"
#include <cstdarg>
#include <string>
#include <vector>

namespace RayEngine
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	enum LOG_SEVERITY 
	{
		LOG_SEVERITY_UNKNOWN = 0,
		LOG_SEVERITY_INFO = 1,
		LOG_SEVERITY_WARNING = 2,
		LOG_SEVERITY_ERROR = 3
	};


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct RE_API LogMessage
	{
		LOG_SEVERITY Severity;
		const Tchar* Message;
	};


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class RE_API ILog
	{
		RE_INTERFACE(ILog);

	public:
		ILog() {}
		virtual ~ILog() {}

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Platform implementation of log
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		virtual void Write(LOG_SEVERITY severity, const std::string& text) const = 0;

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Returns true if the log have a messagebuffer - A log does not need to store messages if it only will write to
			the output.
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		virtual bool HasMessageBuffer() const = 0;

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Flush - Removes all messages from the message buffer and prints them to a file
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		virtual void Flush() = 0;

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Retrives the message count
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		virtual int32 GetMessageCount() const = 0;

		/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
			Retrives a message

			index - The index of the message

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
		virtual const LogMessage& GetMessage(int32 index) const = 0;

	protected:
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		static void PlatformPrint(LOG_SEVERITY severity, const std::string& text);
	};
}