/*////////////////////////////////////////////////////////////

Copyright 2018 Alexander Dahlin

Licensed under the Apache License, Version 2.0 (the
"License"); you may not use this file except in
compliance with the License. You may obtain a copy of
the License at

http ://www.apache.org/licenses/LICENSE-2.0

THIS SOFTWARE IS PROVIDED "AS IS". MEANING NO WARRANTY
OR SUPPORT IS PROVIDED OF ANY KIND.

In event of any damages, direct or indirect that can
be traced back to the use of this software, shall no
contributor be held liable. This includes computer
failure and or malfunction of any kind.

////////////////////////////////////////////////////////////*/

#include "RayEngine.h"
#include "../../Include/Math/Vector2.h"

#if defined(__ANDROID__)
#include <sstream>
#endif


namespace Math
{
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2::Vector2(float x, float y)
		: x(x),
		y(y)
	{
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2::Vector2(const Vector2& other)
		: x(0.0f),
		y(0.0f)
	{
		*this = other;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Add(const Vector2& other)
	{
		x += other.x;
		y += other.y;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Add(float scalar)
	{
		x += scalar;
		y += scalar;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Subtract(const Vector2& other)
	{
		x -= other.x;
		y -= other.y;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Subtract(float scalar)
	{
		x -= scalar;
		y -= scalar;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Multiply(float scalar)
	{
		x *= scalar;
		y *= scalar;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Divide(float scalar)
	{
		x /= scalar;
		y /= scalar;

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Vector2::IsUnitVector() const
	{
		float length = Length();
		return (length > 0.999999f && length < 1.000001);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Vector2::Equals(const Vector2& other) const
	{
		return (x == other.x) && (y == other.y);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float Vector2::Dot(const Vector2& other) const
	{
		return (x * other.x) + (y * other.y);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float Vector2::LengthSqrd() const
	{
		return (x * x) + (y * y);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float Vector2::Length() const
	{
		return sqrt(LengthSqrd());
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::Normalize()
	{
		float length = Length();

		if (length > 0.0f)
		{
			x /= length;
			y /= length;
		}
		else
		{
			x = 0.0f;
			y = 0.0f;
		}

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::UnitVector() const
	{
		return Vector2(*this).Normalize();
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::Normal() const
	{
		return Vector2(-y, x);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::Project(const Vector2& other) const
	{
		Vector2 n(other);
		n.Normalize();

		return Dot(n) * n;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::Reflect(const Vector2& normal) const
	{
		return *this - ((2 * Dot(normal)) * normal);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::string Vector2::ToString() const
	{
#if defined(_ANDROID)
		std::stringstream stream;
		stream << '[' << x << ", " << y << ']';
		return stream.str();
#else
		using namespace std;
		return string('[' + to_string(x) + ", " + to_string(y) + ']');
#endif
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Vector2::operator==(const Vector2& other) const
	{
		return Equals(other);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Vector2::operator!=(const Vector2& other) const
	{
		return !Equals(other);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::operator-() const
	{
		return Vector2(-x, -y);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator=(const Vector2& other)
	{
		if (this != &other)
		{
			x = other.x;
			y = other.y;
		}

		return *this;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator-(Vector2 left, const Vector2& right)
	{
		return left.Subtract(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator+(Vector2 left, const Vector2& right)
	{
		return left.Add(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator-(Vector2 left, float right)
	{
		return left.Subtract(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator+(Vector2 left, float right)
	{
		return left.Add(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator*(Vector2 left, float right)
	{
		return left.Multiply(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator/(Vector2 left, float right)
	{
		return left.Divide(right);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 operator*(float left, Vector2 right)
	{
		return right.Multiply(left);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator-=(const Vector2& other)
	{
		return Subtract(other);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator+=(const Vector2& other)
	{
		return Add(other);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator-=(float scalar)
	{
		return Subtract(scalar);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator+=(float scalar)
	{
		return Add(scalar);;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator*=(float scalar)
	{
		return Multiply(scalar);;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2& Vector2::operator/=(float scalar)
	{
		return Divide(scalar);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Vector2 Vector2::Nan()
	{
		return Vector2(NAN, NAN);
	}
}