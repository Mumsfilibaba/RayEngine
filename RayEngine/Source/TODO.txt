TODO:
-Fix loadImageFromFile (All Formats)
-Properly free the windows console for error output
-Linux when setting an icon or cursor from the functions, remember to create a new Image object.
-Vulkan triangle

-D3D12 Triangle
-Documentation
-RootLayout should control binding of resources

-MSAA-Swapchain
-Swapchain flags for usage, tearing etc
-Swapchain Resize
-Swapchain Fullscreen
-IDeviceContext::SetConstant()
-IDeviceContext::SetIndexBuffer()
-DX12 - Dynamic uploadheap - Resize when needed
-Generate MipMaps
-DX12 - Check tearing support - Vulkan (if supported by the API)
-DX12 - Setup breakpoints when errors occurs

-DX11/DX12 - Bufferusage flags
-DX11 - Static Samplers must be bound from 0 to n (in a single range), should be possible to not do this (DX11StaticSamplerRange?)

-Controller support

-Android: Aquire pointers for native window etc
-Android: Check if system supports vulkan in factory
-Android: ANativeWindow pointer in AndroidWindowImpl
-Android: Save current windowpointer (AndroidWindowImpl*) so events can be sent directly to it

For later:
-Virtual Filesystem
-Error-Codes
-String-Class
-Queue-Class
-Vector-Class
-Hash-Table-Class
-Thread-Class
-Mutex-Class
-Fix deallocation of androidappstate in ondestroy
-Math SIMD (Vec3, Mat3, ColorF), Quaternion, ARM Neon support
-Android Socket Impl
-Finish socketimpl Win32, start on android
-Threadsafe logging
-Log should contain a circulararray so that when maxcount is recived, the first message is replaced with the new one