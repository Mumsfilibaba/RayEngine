TODO:
-D3D12 Triangle
-Vulkan triangle
-Documentation
-Use pointer for desc - Rename info to desc
-Static log for system
-GLImpl - do not return false (Print what function was not loaded)
-RootLayout should control binding of resources

-Implement GetInfo() in all interfaces
-AdapterInfo - Inline
-Swapchain flags for usage, tearing etc
-Swapchain Resize
-Swapchain Fullscreen
-IDeviceContext::SetConstant()
-IDeviceContext::SetIndexBuffer()
-DX12 - Dynamic uploadheap - Resize when needed
-Generate MipMaps
-DX12 - Use AdapterFlags for descrete and integrated graphicscards, find out how to do this in directx, maybe winapi? Does not matter since directx only exists on windows anyway
-DX12 - Check tearing support - Vulkan (if supported by the API)
-DX12 - Setup breakpoints when errors occurs

-DX11/DX12 - Bufferusage flags
-DX11 - Static Samplers must be bound from 0 to n (in a single range), should be possible to not do this (DX11StaticSamplerRange?)

-Vulk - Create dummy surface and search for correct formats etc
-Add p for pointers
-Controller support

-Virtual Filesystem
-Aquire pointers for native window etc
-Check if system supports vulkan in factory
-ANativeWindow pointer in AndroidWindowImpl
-Save current windowpointer (AndroidWindowImpl*) so events can be sent directly to it

For later:
-Error-Codes
-String-Class
-Queue-Class
-Vector-Class
-Hash-Table-Class
-Thread-Class
-Mutex-Class
-Fix deallocation of androidappstate in ondestroy
-Math SIMD (Vec3, Mat3, ColorF), Quaternion, ARM Neon support
-Android Socket Impl
-Finish socketimpl Win32, start on android
-Threadsafe logging
-Log should contain a circulararray so that when maxcount is recived, the first message is replaced with the new one