TODO:
-Render triangle DX11
-Render triangle Vulkan

-DX12 - ImmediateContext
-Seperate CommandList and commandQueue

-Set names on resources (Even if vulkan may not support it)
-DX12 - DescriptorHeapManager
-DX12 - Different versions of the parametertype for the shader in the rootsignature
-DX12 - Use AdapterFlags for descrete and integrated graphicscards, find out how to do this in directx, maybe winapi? Does not matter since directx only exists on windows anyway
-DX12 - Check tearing support - Vulkan (if supported by the API)
-DX12 - Swapchain flags for usage, format, count etc
-DX12 - DepthStencilState, RasterizerState, BlendState
-DX12 - Setup breakpoints when errors occurs
-DX12 - Device object should create native ptrs
-DX12 - Dynamic uploadheap - Resizeses when needed
-DX12 - ViewManager for buffers?
-DX12 - Resource-Transitions
-DX12 - How resources are used needs refining
-Swapchain Resize
-Swapchain Fullscreen
-Create rendertargets for swapchain during creation?

-DX11/DX12 - Bufferusage flags

-TextureLoader needs to be updated with the new formats
-Add p for pointers
-AdapterInfo.cpp
-Controller support

-Parent interfaces should be queried instead of just returned
-Aquire pointers for native window etc
-Check if system supports vulkan in factory
-ANativeWindow pointer in AndroidWindowImpl
-Save current windowpointer (AndroidWindowImpl*) so events can be sent directly to it
-Virtual Filesystem


For later:
-All formats in DX12, DX11 and Vulkan should be supported
-Error-Codes
-String-Class
-Queue-Class
-Vector-Class
-Hash-Table-Class
-Thread-Class
-Mutex-Class
-Fix deallocation of androidappstate in ondestroy
-Math SIMD (Vec3, Mat3, ColorF), Quaternion, ARM Neon support
-Android Socket Impl
-Finish socketimpl Win32, start on android
-Threadsafe logging
-Log should contain a circulararray so that when maxcount is recived, the first message is replaced with the new one