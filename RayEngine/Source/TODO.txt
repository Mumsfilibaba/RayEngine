TODO:
Render triangle DX12
Render triangle DX11
Render triangle Vulkan

-DX12 - Use AdapterFlags for descrete and integrated graphicscards, find out how to do this in directx, maybe winapi? Does not matter since directx only exists on windows anyway
-DX12 - Check tearing support - Vulkan (if supported by the API)
-Set names on resources (Even if vulkan may not support it)
-All formats in DX12, DX11 and Vulkan should be supported
-DX - DecsriptorHeapManager
-Vulkan - referencecounting
-DX - Swapchain flags for usage, format, count etc
-DX - ResourceView BaseClass - Very similar classes

-Aquire pointers for native window etc
-Check if system supports vulkan in factory
-ANativeWindow pointer in AndroidWindowImpl
-Save current windowpointer (AndroidWindowImpl*) so events can be sent directly to it
-Virtual Filesystem


For later:
-Error-Codes
-String-Class
-Queue-Class
-Vector-Class
-Hash-Table-Class
-Thread-Class
-Mutex-Class
-Fix deallocation of androidappstate in ondestroy
-Math SIMD (Vec3, Mat3, ColorF), Quaternion, ARM Neon support
-Android Socket Impl
-Finish socketimpl Win32, start on android
-Threadsafe logging
-Log should contain a circulararray so that when maxcount is recived, the first message is replaced with the new one