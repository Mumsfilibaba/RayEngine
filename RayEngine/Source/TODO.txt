TODO:
-IFactory - Vulkan
-IDevice - Vulkan
-ICommandQueue - Vulkan
-ISwapChain - Vulkan

-Aquire pointers for native window etc
-Check if system supports vulkan in factory
-ANativeWindow pointer in AndroidWindowImpl
-Save current windowpointer so that we can send events directly to it
-Virtual Filesystem
-Use AdapterFlags for descrete and integrated graphicscards, find out how to do this in directx, maybe winapi? Does not matter since directx only exists on windows anyway
-DX12 - Check tearing support - Vulkan (if supported by the API)


-This commit:
-Added DX12Device
-Added AdapterList for easier use of adapterinfo

For later:
-Error-Codes
-String-Class
-Queue-Class
-Vector-Class
-Hash-Table-Class
-Thread-Class
-Mutex-Class
-Fix deallocation of androidappstate in ondestroy
-Math SIMD (Vec3, Mat3, ColorF), Quaternion, ARM Neon support
-Android Socket Impl
-Finish socketimpl Win32, start on android
-Threadsafe logging
-Log should contain a circulararray so that when maxcount is recived, the first message is replaced with the new one